#domain/book_logic.py
import json
import re
from logger import logger 

MAX_RETRIES = 3

class BookGenerator:
    def __init__(self, llm_client):
        self.llm = llm_client
    
    def generate_outline(self, book_description: str) -> tuple:
        prompt = f"""
            –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:
            {book_description}

            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å —Ç–∞–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏:
            - "storylines": —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—é–∂–µ—Ç–Ω—ã—Ö –ª–∏–Ω–∏–π (5‚Äì7 —à—Ç—É–∫)
            - "chapters": —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ —Å –ø–æ–ª—è–º–∏:
                "chapter": –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1),
                "title": –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã,
                "events": —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (–ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é)

            –í–∫–ª—é—á–∏ –æ—Ç 8 –¥–æ 12 –≥–ª–∞–≤. –û–±–µ—Å–ø–µ—á—å –ª–æ–≥–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞ –ø–æ –≤—Å–µ–º –ª–∏–Ω–∏—è–º.
            """
        
        try:
            result = self.llm.generate_text(prompt)
            if not result or not isinstance(result, str):
                result = "{}"

            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º extract_json
            data = self.extract_json(result)

            if not data:
                raise ValueError("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç")

            storylines = data.get("storylines")
            chapters = data.get("chapters")

            if not isinstance(storylines, list) or not isinstance(chapters, list):
                raise ValueError("storylines –∏ chapters –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–∞–º–∏")

            if len(storylines) == 0 or len(chapters) == 0:
                raise ValueError("storylines –∏ chapters –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")

            return storylines, chapters

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—é–∂–µ—Ç–∞: {e}")
            raise ValueError("Failed to parse LLM response") from e


    def extract_json(self, text: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        if not text or not isinstance(text, str):
            return {}

        # logger.debug(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM:\n{text[:500]}...")  #  

        try:
            return json.loads(text)
        except json.JSONDecodeError:
            pass

        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ ```json ... ```
        match = re.search(r'```(?:json)?\s*\n(.*?)\n```', text, re.DOTALL | re.IGNORECASE)
        if match:
            try:
                return json.loads(match.group(1))
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –±–ª–æ–∫–∞: {e}")

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ { ... }
        start = text.find('{')
        end = text.rfind('}')
        if start != -1 and end != -1 and end > start:
            try:
                return json.loads(text[start:end+1])
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM:\n{text}")
        return {}

    def generate_chapter(
        self, 
        chapter_data: dict, 
        book_description: str, 
        storylines: list,
        previous_summaries: list,
        chapter_length: str = "800-1200 —Å–ª–æ–≤"
    ) -> tuple:
        prev_text = "\n".join(previous_summaries) if previous_summaries else "None"
        
        prompt = f"""
            –û–ü–ò–°–ê–ù–ò–ï –ö–ù–ò–ì–ò: {book_description}

            –°–Æ–ñ–ï–¢–ù–´–ï –õ–ò–ù–ò–ò: {", ".join(storylines)}

            –†–ï–ó–Æ–ú–ï –ü–†–ï–î–´–î–£–©–ò–• –ì–õ–ê–í:
            {prev_text}

            –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –¢–ï–ö–£–©–ï–ô –ì–õ–ê–í–ï:
            –ì–ª–∞–≤–∞ {chapter_data['chapter']}: {chapter_data['title']}
            –†–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞:
            {json.dumps(chapter_data['events'], indent=2, ensure_ascii=False)}

            –ù–∞–ø–∏—à–∏:
            1. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã ({chapter_length})
            2. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ —Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è

            –í–ê–ñ–ù–û: –í–°–Å ‚Äî –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û.

            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{"text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã", "summary": "—Ä–µ–∑—é–º–µ –∏–∑ —Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å –∏–º–µ–Ω–∞, –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏—è, –∫—Ç–æ —ç—Ç–æ –∏ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç."}}
            """
        
        
        for attempt in range(MAX_RETRIES):
            try:
                result = self.llm.generate_text(prompt)
            except Exception as e:
                logger.warning(f"Attempt {attempt+1} failed: {e}")
                if attempt == MAX_RETRIES - 1:
                    raise
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            data = self.extract_json(result)
            
            if not data:
                raise ValueError("Empty JSON response")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if "text" not in data or "summary" not in data:
                raise KeyError("Missing required fields in response")
            
            return data["text"], data["summary"]
        
        except (ValueError, KeyError, json.JSONDecodeError) as e:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # error_filename = f"error_chapter_{chapter_data['chapter']}.txt"
            # with open(error_filename, "w", encoding="utf-8") as f:
                # f.write(f"Prompt:\n{prompt}\n\nResponse:\n{result}")
            
            logger.error(f"Error processing chapter {chapter_data['chapter']}: {e}")
            # logger.error(f"Full error response saved to {error_filename}")
            raise ValueError(f"Failed to process chapter response: {e}") from e