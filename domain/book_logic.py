#domain/book_logic.py
import json
import re
from logger import logger 

MAX_RETRIES = 3

class BookGenerator:
    def __init__(self, llm_client):
        self.llm = llm_client
    
    def generate_outline(self, book_description: str) -> tuple:
        prompt = f"""
            –°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:
            {book_description}

            –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å —Ç–∞–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏:
            - "storylines": —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—é–∂–µ—Ç–Ω—ã—Ö –ª–∏–Ω–∏–π (5‚Äì7 —à—Ç—É–∫)
            - "chapters": —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ —Å –ø–æ–ª—è–º–∏:
                "chapter": –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1),
                "title": –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã,
                "events": —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–Ω–∏–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (–ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é)

            –í–∫–ª—é—á–∏ –æ—Ç 8 –¥–æ 12 –≥–ª–∞–≤. –û–±–µ—Å–ø–µ—á—å –ª–æ–≥–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞ –ø–æ –≤—Å–µ–º –ª–∏–Ω–∏—è–º.
            """
        
        result = self.llm.generate_text(prompt)
        # üîΩ –ó–∞—â–∏—Ç–∞: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ result ‚Äî —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ None
        if not result or not isinstance(result, str):
            result = "{}"
        try:
            data = json.loads(result.strip("```json\n").strip("\n```"))
            return data["storylines"], data["chapters"]
        except (json.JSONDecodeError, KeyError) as e:
            raise ValueError("Failed to parse LLM response") from e
    
    def extract_json(self, text: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
            return json.loads(text)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –±–ª–æ–∫–∞ –∫–æ–¥–∞
            match = re.search(r'```json\n(.*?)\n```', text, re.DOTALL)
            if match:
                try:
                    return json.loads(match.group(1))
                except json.JSONDecodeError as e:
                    logger.error(f"JSON extraction failed: {e}\nText: {text[:500]}...")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON –≤—Ä—É—á–Ω—É—é
            start_idx = text.find('{')
            end_idx = text.rfind('}')
            if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
                try:
                    return json.loads(text[start_idx:end_idx+1])
                except json.JSONDecodeError as e:
                    logger.error(f"Manual JSON extraction failed: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        logger.error(f"Failed to extract JSON from response:\n{text[:1000]}...")
        return {}
    
    def generate_chapter(
        self, 
        chapter_data: dict, 
        book_description: str, 
        storylines: list,
        previous_summaries: list,
        chapter_length: str = "800-1200 —Å–ª–æ–≤"
    ) -> tuple:
        prev_text = "\n".join(previous_summaries) if previous_summaries else "None"
        
        prompt = f"""
            –û–ü–ò–°–ê–ù–ò–ï –ö–ù–ò–ì–ò: {book_description}

            –°–Æ–ñ–ï–¢–ù–´–ï –õ–ò–ù–ò–ò: {", ".join(storylines)}

            –†–ï–ó–Æ–ú–ï –ü–†–ï–î–´–î–£–©–ò–• –ì–õ–ê–í:
            {prev_text}

            –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –¢–ï–ö–£–©–ï–ô –ì–õ–ê–í–ï:
            –ì–ª–∞–≤–∞ {chapter_data['chapter']}: {chapter_data['title']}
            –†–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞:
            {json.dumps(chapter_data['events'], indent=2, ensure_ascii=False)}

            –ù–∞–ø–∏—à–∏:
            1. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã ({chapter_length})
            2. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ —Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è

            –í–ê–ñ–ù–û: –í–°–Å ‚Äî –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï. –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û.

            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{"text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã", "summary": "—Ä–µ–∑—é–º–µ –∏–∑ —Ç—Ä—ë—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—à—å –∏–º–µ–Ω–∞, –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏—è, –∫—Ç–æ —ç—Ç–æ –∏ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç."}}
            """
        
        
        for attempt in range(MAX_RETRIES):
            try:
                result = self.llm.generate_text(prompt)
            except Exception as e:
                logger.warning(f"Attempt {attempt+1} failed: {e}")
                if attempt == MAX_RETRIES - 1:
                    raise
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
            data = self.extract_json(result)
            
            if not data:
                raise ValueError("Empty JSON response")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if "text" not in data or "summary" not in data:
                raise KeyError("Missing required fields in response")
            
            return data["text"], data["summary"]
        
        except (ValueError, KeyError, json.JSONDecodeError) as e:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # error_filename = f"error_chapter_{chapter_data['chapter']}.txt"
            # with open(error_filename, "w", encoding="utf-8") as f:
                # f.write(f"Prompt:\n{prompt}\n\nResponse:\n{result}")
            
            logger.error(f"Error processing chapter {chapter_data['chapter']}: {e}")
            # logger.error(f"Full error response saved to {error_filename}")
            raise ValueError(f"Failed to process chapter response: {e}") from e