# web/app.py
from flask import Flask, render_template, request
from config.settings import settings
from infrastructure.database import init_db, Session
from infrastructure.outline_manager import OutlineManager
from domain.book_logic import BookGenerator
from infrastructure.llm_client import LLMClientFactory
from infrastructure.database.models import Book, Chapter, PlotLine, PlotEvent
from cli.generate_chapters import main as generate_chapters_cli
from sqlalchemy import delete
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
Session = init_db(settings.DB_URL)

# –í—Ä–µ–º–µ–Ω–Ω—ã–π user_id
USER_ID = 1
BOOK_ID = 1  # üî• –†–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û —Å –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–æ–π


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/generate-outline", methods=["POST"])
def generate_outline():
    description = request.form["description"]
    title = request.form.get("title", "–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞")

    logger.info(f"[WEB] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—é–∂–µ—Ç–∞: {description}")
    session = Session()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        llm = LLMClientFactory.create_client(language='gemini')  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ gemini –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π
        generator = BookGenerator(llm)
        manager = OutlineManager(session)

        # üîΩ –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é –∫–Ω–∏–≥—É (id=1) –∏ –≤—Å—ë, —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–æ
        session.execute(delete(PlotEvent).where(PlotEvent.chapter.has(book_id=BOOK_ID)))
        session.execute(delete(PlotLine).where(PlotLine.book_id == BOOK_ID))
        session.execute(delete(Chapter).where(Chapter.book_id == BOOK_ID))
        session.execute(delete(Book).where(Book.id == BOOK_ID))
        session.commit()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—é–∂–µ—Ç
        storylines, chapters = generator.generate_outline(description)

        # üîΩ –°–û–ó–î–ê–Å–ú –Ω–æ–≤—É—é –∫–Ω–∏–≥—É —Å id=1
        # manager.save_outline —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Å—ë —Å book_id=1
        manager.save_outline(
            book_title=title,
            premise=description,
            storylines=storylines,
            chapters=chapters,
            user_id=USER_ID
        )

        # üîΩ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ book_id=1
        data = manager.load_outline(book_id=BOOK_ID)
        if not data:
            return "<div class='alert alert-danger'>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—é–∂–µ—Ç</div>", 500

        storylines = data["storylines"]
        chapters = data["chapters"]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML-—Ç–∞–±–ª–∏—Ü—É
        return render_template("partials/outline_table.html",
                             storylines=storylines,
                             chapters=chapters)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        session.rollback()
        return f"<div class='alert alert-danger'>–û—à–∏–±–∫–∞: {str(e)}</div>", 500

    finally:
        session.close()

@app.route("/generate-chapters", methods=["POST"])
def generate_chapters():
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CLI-–∫–æ–¥, –Ω–æ –≤ –≤–µ–±–µ
        generate_chapters_cli(language="–†—É—Å—Å–∫–∏–π", book_id=1, user_id=USER_ID)
        return "<div class='alert alert-success mt-3'>‚úÖ –ì–ª–∞–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!</div>"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤: {e}")
        return f"<div class='alert alert-danger mt-3'>‚ùå –û—à–∏–±–∫–∞: {str(e)}</div>"


@app.route("/toggle-chapter", methods=["POST"])
def toggle_chapter():
    try:
        book_id = int(request.form["book_id"])
        chapter_num = int(request.form["chapter_num"])
        enabled = request.form.get("enabled") == "true"

        session = Session()
        manager = OutlineManager(session)

        try:
            manager.toggle_chapter_generate(book_id, chapter_num, enabled)
            # –í–µ—Ä–Ω—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å
            checked_attr = "checked" if enabled else ""
            return f'<input type="checkbox" hx-post="/toggle-chapter" hx-include="[name=book_id]" hx-vals=\'{{"chapter_num":{chapter_num}, "enabled":{str(not enabled).lower()}}}\' hx-swap="outerHTML" {checked_attr}>'
        finally:
            session.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≥–ª–∞–≤—ã: {e}")
        return "‚ùå", 500
    
if __name__ == "__main__":
    app.run(debug=True)