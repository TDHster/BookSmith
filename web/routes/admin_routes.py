# web/routes/admin_routes.py
from flask import render_template, session
from infrastructure.database import get_session
from infrastructure.database.models import Book, User
from logger import logger

def init_admin_routes(app):
    @app.route("/admin/books")
    def admin_books():
        user_id = session.get("user_id")
        
        # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ user_id=1
        if user_id != 1:
            logger.warning(f"–î–æ—Å—Ç—É–ø –∫ /admin/books –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return "<h1>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h1><p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</p>", 403

        session_db = get_session()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ + –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            books = (
                session_db.query(Book, User.username)
                .join(User, User.id == Book.user_id)
                .order_by(Book.created_at.desc())
                .all()
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            books_data = []
            for book, username in books:
                books_data.append({
                    "id": book.id,
                    "title": book.title,
                    "premise": book.premise,
                    "username": username,
                    "created_at": book.created_at
                })

            return render_template("admin_books.html", books=books_data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            return "<h1>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>", 500

        finally:
            session_db.close()